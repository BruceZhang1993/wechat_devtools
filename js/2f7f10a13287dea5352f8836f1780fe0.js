'use strict';!function(require,directRequire){const a=require('react'),b=require('./d3976cc01aeebc5b09e11c4135b6bd8d.js'),c=require('./c4190a2430506f3602ca550e1e75d620.js'),d=require('./a68a883909029b8e019954aba1ad6f7b.js'),e=require('./e40e098fcb2111ba9f21e79c183fec7e.js'),{connect:f}=require('react-redux'),g='html/about.html';class h extends a.Component{componentDidMount(){this.initWebview(),this._onMessage=this.onMessage.bind(this),e.register(this._onMessage),global.Win.setResizable(!0)}componentWillReceiveProps(a){if(a.device!=this.props.device&&setTimeout(()=>{this.setWebviewInfo()}),a.act!=this.props.act){let b=this.props.act,c=a.act;setTimeout(()=>{this.doActions(c,b)})}a.jssdkCallbackInfo!=this.props.jssdkCallbackInfo&&e.send({command:'WEBDEBUGGER_INVOKE_CALLBACK',data:a.jssdkCallbackInfo})}componentWillUnmount(){e.unRegister(this._onMessage)}onMessage(a){let{command:b,data:c}=a;'WEBDEBUGGER_INVOKE'==b?this.props.jssdkActions.exec(c):'WEBDEBUGGER_GET_TITLE_RES'==b&&this.props.debuggerActions.setTitle(c.title)}doActions(a,b){let c=this.webview;return c?a.reload==b.reload?a.forward==b.forward?a.back==b.back?a.blank==b.blank?void(a.load!=b.load&&(this.needGetA8key='urlbar'!==this.props.from,c.src='about:blank'==this.props.url?g:this.props.url)):void(c.src=g):void(c.canGoBack()&&c.back()):void c.forward():void c.reload():void 0}initWebview(){let a=this.webview=document.createElement('webview');a.className=`simulator-bd-webview_body webviewbody`,a.setAttribute('partition','persist:simulator'),this.container.appendChild(a),this.setWebviewInfo(),this.initEvent(),this.props.debuggerActions.showDevtools(a)}initEvent(){let a=this.webview;a.request.onBeforeRequest.addListener((a)=>{let{url:b,type:c}=a;if('main_frame'!==c)return{};if(/^chrome-extension:\/\//.test(b)||/^file:\/\//.test(b))return{};if(!this.needGetA8key)return this.needGetA8key=!0,{};let d=/\#wechat_redirect$/.test(b);return this.props.debuggerActions.getA8Key({url:b,isSync:d,from:'webviewrequest'}),{cancel:d}},{urls:['<all_urls>']},['blocking']),a.addEventListener('loadstart',(a)=>{a.isTopLevel&&this.upWebviewStatus({loading:'start'})}),a.addEventListener('loadcommit',(a)=>{a.isTopLevel&&this.upWebviewStatus({type:'loadcommit'})}),this.webview.addEventListener('loadstop',()=>{this.upWebviewStatus({loading:'stop'}),e.send({command:'WEBDEBUGGER_GET_TITLE'})})}setWebviewInfo(){let a=this.webview,b=this.props.height/this.props.deviceScale,c=this.props.width/this.props.deviceScale;a.setUserAgentOverride(`${this.props.ua} webdebugger port/${global.messageCenterPort}`),a.setAttribute('style',`position:absolute;height:${b}px;width:${c}px`),a.reload()}upWebviewStatus(){let a=this.webview.src,b=this.webview.canGoBack();this.props.leftbtn!=b&&this.props.debuggerActions.setLeftBtn(b);a==this.props.url||this.props.debuggerActions.setUrl(a)}render(){let b={width:this.props.width/this.props.deviceScale,height:this.props.height/this.props.deviceScale};return a.createElement('div',{className:'webview',ref:(a)=>this.container=a,style:b})}}module.exports=f((a)=>{let b=a.toolbar.deviceInfo,c=a.webdebugger||{};return{leftbtn:c.leftbtn,url:c.url,from:c.from,act:c.act,jssdkCallbackInfo:c.jssdkCallbackInfo,device:b,deviceScale:a.toolbar.deviceScale,ua:b.ua,dpr:b.dpr,height:b.screenHeight-b.navigationbarHeight-b.statusbarHeight,width:b.screenWidth}},(a)=>{return{debuggerActions:b.bindActionCreators(c,a),jssdkActions:b.bindActionCreators(d,a)}})(h)}(require('lazyload'),require);